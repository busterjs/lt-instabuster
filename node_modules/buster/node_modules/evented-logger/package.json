{
  "name": "evented-logger",
  "version": "1.0.0",
  "description": "An evented console logger",
  "homepage": "http://busterjs.org/docs/evented-logger",
  "author": {
    "name": "Christian Johansen"
  },
  "contributors": [
    {
      "name": "Christian Johansen",
      "email": "christian@cjohansen.no",
      "url": "http://cjohansen.no"
    },
    {
      "name": "August Lilleaas",
      "email": "august.lilleaas@gmail.com",
      "url": "http://augustl.com"
    },
    {
      "name": "Stein Magnus Jodal",
      "email": "stein.magnus@jodal.no"
    }
  ],
  "main": "./lib/evented-logger",
  "repository": {
    "type": "git",
    "url": "https://github.com/busterjs/evented-logger.git"
  },
  "scripts": {
    "test": "./node_modules/buster/bin/buster-test --node"
  },
  "dependencies": {
    "lodash": "~1.0",
    "bane": "~1.0"
  },
  "devDependencies": {
    "buster": "0.6.11"
  },
  "readme": "==============\nevented-logger\n==============\n\n    Event emitting logger with custom log events\n\n.. raw:: html\n\n    <a href=\"http://travis-ci.org/busterjs/evented-logger\" class=\"travis\">\n      <img src=\"https://secure.travis-ci.org/busterjs/evented-logger.png\">\n    </a>\n\n``evented-logger`` is an event emitting logger utility. It does not print\nanything to the stdout or anywhere else, it only emits events. You can create\nlogger objects with arbitrary levels, set the current level and subscribe to\nevents to print them somewhere visible. Logged messages are formatted by a\npluggable formatter (e.g. something like `formatio\n<http://search.npmjs.org/#/formatio>`_).\n\n``evented-logger`` works in browsers (including old and rowdy ones, like IE6)\nand Node. It will define itself as an AMD module if you want it to (i.e. if\nthere's a ``define`` function available).\n\nDevelopers - Running tests\n==========================\n\n::\n\n    npm install\n    ./node_modules/.bin/buster-test --node\n    ./node_modules/.bin/buster-server\n    ./node_modules/.bin/buster-test --browser\n\nEvents\n======\n\nEvent: ``\"log\", function (envelope) {}``\n----------------------------------------\n\nEmitted every time data is logged and is allowed by the current log level. Any\nmessages logged to the current level or a higher priority level will be emitted.\n\nMethods\n=======\n\nParts of the logger API is dynamically assembled by the ``create`` method. The\nAPI documentation also describes the methods dynamically generated by this\nmethod in the default setup.\n\n.. function:: eventedLogger.create([options])\n\n    Creates a new logger. The default behavior is to create a logger with the\n    levels/methods ``error``, ``warn``, ``log`` and ``debug``. ``\"debug\"`` is\n    the default log level, meaning that all messages are emitted.\n\n    The ``options`` argument can be used to control what logging methods the\n    logger should have, default logging level and formatting method.\n\n    **Typical usage**\n\n    ::\n\n        var logger = eventedLogger.create();\n\n        logger.on(\"log\", function (msg) {\n            console.log(\"[\" + msg.level.toUpperCase() + \"] \" + msg.message);\n        });\n\n        logger.warn(\"Watch it!\");\n        logger.log([], 42, {});\n\n        // Prints the following to stdout:\n        // [WARN] Watch it!\n        // [LOG] [] 42 {}\n\n    **Setting the default level**\n\n    ::\n\n        var logger = eventedLogger.create({ level: \"warn\" });\n\n        logger.on(\"log\", function (msg) {\n            console.log(\"[\" + msg.level.toUpperCase() + \"] \" + msg.message);\n        });\n\n        logger.warn(\"Watch it!\");\n        logger.log([], 42, {});\n\n        // Will not print the log message, so stdout looks like:\n        // [WARN] Watch it!\n\n    **Creating custom loggers**\n\n    Custom levels should be passed ordered from highest to lowest severity. The\n    generated methods will pass through messages if the current log level is set\n    to either the same level as the message or one in the lower indexes of the\n    levels array.\n\n    When you create a logger with customized levels, the default log level will\n    be set to the most permissive one, i.e. the last level in the array.\n\n    ::\n\n        var logger = eventedLogger.create({\n            levels: [\"nuclear\", \"eerie\", \"info\", \"debug\"]\n        });\n\n        logger.level == \"debug\"; //=&gt; true\n        typeof logger.error == \"undefined\";\n\n        logger.nuclear(\"This is NOT good\");\n\n    If you want the logger to have some other default log level than the most\n    permissive one, include ``level``:\n\n    ::\n\n        var logger = eventedLogger.create({\n            levels: [\"nuclear\", \"eerie\", \"info\", \"debug\"],\n            level: \"eerie\"\n        });\n\n        logger.info(\"This is NOT good\"); // Won't be emitted\n\n.. function:: eventedLogger.format(object)\n\n    Formats a logged object. This function is called once for each argument\n    passed to a logger method. The default implementation serializes objects\n    through `JSON.stringify <https://developer.mozilla.org/en/json>`_. Functions\n    and primitives are converted to strings by way of their ``toString``\n    methods.\n\n    The method can be overridden to provide more powerful formatting of objects\n    such as functions and problematic host objects.\n\n    `buster-test <http://busterjs.org/docs/test/>`_ provides more readable\n    formatting through the `formatio <http://busterjs.org/docs/format>`_ module.\n    There is basically three ways to achieve this:\n\n    **Override the original method**\n\n    ::\n\n        eventedLogger.format = buster.format.ascii;\n\n    **Override the method on an instance**\n\n    ::\n\n        var logger = eventedLogger.create();\n        logger.format = buster.format.ascii;\n\n    **Pass the formatter to ``create``**\n\n    ::\n\n        var logger = eventedLogger.create({\n            logger: buster.format.ascii\n        });\n\n.. function:: eventedLogger.error(message1[, message2, ...])\n\n    Logs messages with the ``\"error\"`` level. Messages will always be emitted\n    from the logger unless the log level has been set to a non-existent level.\n\n    ::\n\n        ``var logger = eventedLogger.create();\n        // ...\n\n        logger.error(\"Something went wrong\", myObjToDebug);\n\n    **NB!** If you have created a logger with custom levels, the ``error`` method\n    will not exist unless you explicitly included it.\n\n.. function:: eventedLogger.warn(message1[, message2, ...])\n\n    Logs messages with the ``\"warn\"`` level. This message will be emitted from\n    the logger unless its level is set to ``\"error\"`` or a non-existent level.\n\n    ::\n\n        var logger = eventedLogger.create();\n        // ...\n\n        logger.warn(\"Something fishy?\", myObjToDebug);\n\n    **NB!** If you have created a logger with custom levels, the ``warn`` method\n    will not exist unless you explicitly included it.\n\n.. function:: eventedLogger.log(message1[, message2, ...])\n\n    Logs messages with the ``\"log\"`` level. This message will be emitted from\n    the logger if its level is set to ``\"log\"`` or ``\"debug\"`` (default).\n\n    ::\n\n        var logger = eventedLogger.create();\n        // ...\n\n        logger.log(\"Here's an object\", myObjToDebug);\n\n    **NB!** If you have created a logger with custom levels, the ``log`` method\n    will not exist unless you explicitly included it.\n\n.. function:: eventedLogger.debug(message1[, message2, ...])\n\n    Logs messages with the ``\"debug\"`` level. This message will only be emitted\n    from the logger if its level is set to ``\"debug\"`` (default).\n\n    ::\n\n        var logger = eventedLogger.create();\n        // ...\n\n        logger.debug(\"What's going on??\", myObjToDebug);\n\n    **NB!** If you have created a logger with custom levels, the ``debug``\n    method will not exist unless you explicitly included it.\n\nProperties\n==========\n\n.. attribute:: eventedLogger.level\n\n    Default: ``\"debug\"``\n\n    Set the level of the logger, silence all messages for less severe levels.\n    The default level is the most permissive one - ``\"debug\"`` when not using\n    custom levels.\n\nSupporting objects\n==================\n\n.. attribute:: eventedLoggerEnvelope\n\n    An object representing a logged message. Contains two properties:\n\n    ``level``:\n        The log level as a lower case string, e.g. ``\"debug\"``\n\n    ``message``:\n        A formatted log message, containing all arguments passed to the log\n        method joined by a single blank space.\n\n.. attribute:: eventedLoggerOptions\n\n    Options passed to :func:`eventedLogger.create`.\n\n    ``level``:\n        The default log level, i.e. the minimum required level the logger will\n        emit events for. Default value is ``\"debug\"``, i.e. all messages.\n\n    ``levels``:\n        An array of levels the logger supports. Default is ``[\"error\", \"warn\",\n        \"log\", \"debug\"]``. Each string in this array names methods created on\n        the logger.\n\n    ``formatter``:\n        The function that should format arguments. See\n        :func:`eventedLogger.format`.\n",
  "_id": "evented-logger@1.0.0",
  "_from": "evented-logger@~1.0"
}
