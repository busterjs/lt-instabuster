{
  "name": "referee",
  "version": "1.0.1",
  "description": "Assertions for any JavaScript test framework and environment",
  "homepage": "http://busterjs.org/docs/referee",
  "author": {
    "name": "Christian Johansen"
  },
  "contributors": [
    {
      "name": "Christian Johansen",
      "email": "christian@cjohansen.no",
      "url": "http://cjohansen.no"
    },
    {
      "name": "August Lilleaas",
      "email": "august.lilleaas@gmail.com",
      "url": "http://augustl.com"
    },
    {
      "name": "Dave Geddes",
      "email": "davidcgeddes@gmail.com"
    },
    {
      "name": "Malcolm Locke",
      "email": "malc@wholemeal.co.nz"
    },
    {
      "name": "Stein Magnus Jodal",
      "email": "stein.magnus@jodal.no"
    }
  ],
  "main": "./lib/referee",
  "repository": {
    "type": "git",
    "url": "https://github.com/busterjs/referee"
  },
  "scripts": {
    "test": "./node_modules/buster/bin/buster-test --node"
  },
  "dependencies": {
    "lodash": "~1.0",
    "samsam": "~1.0",
    "bane": "~1.0"
  },
  "devDependencies": {
    "sinon": ">=1.4",
    "buster-util": ">=0.5"
  },
  "readme": "=======\nReferee\n=======\n\n    Referee is in your unit tests, deciding who passes and who fails\n\n.. raw:: html\n\n    <a href=\"http://travis-ci.org/busterjs/referee\" class=\"travis\">\n      <img src=\"https://secure.travis-ci.org/busterjs/referee.png\">\n    </a>\n\n``referee`` is a test-framework agnostic assertion and expectation library.\nSome highlights:\n\n- Rich library of assertions\n- Symmetric assert/refute (refute is ``referee``'s \"assert.not*\")\n- Evented: Emits success and failure events\n- Failing assertions throw exceptions by default, but can be configured to not\n- API to add custom assertions that provides quite a bit of plumbing for free\n\nFull documentation:\n`docs.busterjs.org/en/latest/modules/buster-assertions <http://docs.busterjs.org/en/latest/modules/buster-assertions/>`_.\n\n``referee`` works in browsers (including old and rowdy ones, like IE6) and Node.\nIt will define itself as an AMD module if you want it to (i.e. if there's a\n``define`` function available).\n\nDevelopers - Running tests\n==========================\n\n::\n\n    npm install\n    ./node_modules/.bin/buster-test --node\n    ./node_modules/.bin/buster-server\n    ./node_modules/.bin/buster-test --browser\n\nAssertions\n==========\n\n- ``assert(actual[, message])``\n- ``assert.same(actual, expected[, message])``\n- ``assert.equals(actual, expected[, message])``\n- ``assert.greater(number, target[, message])``\n- ``assert.less(number, target[, message])``\n- ``assert.defined(actual[, message])``\n- ``assert.isNull(actual[, message])``\n- ``assert.match(obj1, obj2[, message])``\n- ``assert.isObject(actual[, message])``\n- ``assert.isFunction(actual[, message])``\n- ``assert.isTrue(actual[, message])``\n- ``assert.isFalse(actual[, message])``\n- ``assert.isString(actual[, message])``\n- ``assert.isBoolean(actual[, message])``\n- ``assert.isNumber(actual[, message])``\n- ``assert.isNaN(actual[, message])``\n- ``assert.isArray(actual[, message])``\n- ``assert.isArrayLike(actual[, message])``\n- ``assert.exception(fn[, matcher][, message])``\n- ``assert.near(actual, expected, delta[, message])``\n- ``assert.hasPrototype(actual, expected[, message])``\n- ``assert.contains(haystack, needle[, message])``\n- ``assert.tagName(element, tagName[, message])``\n- ``assert.className(element, className[, message])``\n\nRefutations\n===========\n\n- ``refute(actual[, message])``\n- ``refute.same(actual, expected[, message])``\n- ``refute.equals(actual, expected[, message])``\n- ``refute.greater(number, target[, message])``\n- ``refute.less(number, target[, message])``\n- ``refute.defined(actual[, message])``\n- ``refute.isNull(actual[, message])``\n- ``refute.match(obj1, obj2[, message])``\n- ``refute.isObject(actual[, message])``\n- ``refute.isFunction(actual[, message])``\n- ``refute.isTrue(actual[, message])``\n- ``refute.isFalse(actual[, message])``\n- ``refute.isString(actual[, message])``\n- ``refute.isBoolean(actual[, message])``\n- ``refute.isNumber(actual[, message])``\n- ``refute.isNaN(actual[, message])``\n- ``refute.isArray(actual[, message])``\n- ``refute.isArrayLike(actual[, message])``\n- ``refute.exception(fn[, matcher][, message])``\n- ``refute.near(actual, expected, delta[, message])``\n- ``refute.hasPrototype(actual, expected[, message])``\n- ``refute.contains(haystack, needle[, message])``\n- ``refute.tagName(element, tagName[, message])``\n- ``refute.className(element, className[, message])``\n",
  "_id": "referee@1.0.1",
  "_from": "referee@~1.0"
}
